name: Rust CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Run Tests
      run: cargo test --verbose

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-pc-windows-gnu]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Build for ${{ matrix.target }}
      run: |
        if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
          cargo build --target ${{ matrix.target }} --no-default-features --release
        else
          cargo build --features duckdb --release
        fi
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}-build
        path: target/${{ matrix.target }}/release/

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && needs.test.result == 'success' && needs.build.result == 'success'
    steps:
    - uses: actions/checkout@v4
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release
        draft: false
        prerelease: false
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: path/to/your/release/asset
        asset_name: your-asset-name
        asset_content_type: application/octet-stream

